<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>移动互联专业实践</title><link>https://mi.zjgsu.xyz/</link><description>Recent content on 移动互联专业实践</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hanjianwei@zjgsu.edu.cn (Jianwei Han)</managingEditor><webMaster>hanjianwei@zjgsu.edu.cn (Jianwei Han)</webMaster><lastBuildDate>Tue, 20 Oct 2020 18:30:00 +0800</lastBuildDate><atom:link href="https://mi.zjgsu.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>UI/UX设计</title><link>https://mi.zjgsu.xyz/2020/10/20/ui-ux/</link><pubDate>Tue, 20 Oct 2020 18:30:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/10/20/ui-ux/</guid><description>&lt;p>UI/UX设计不只是设计网站或者App的界面，还要分析用户的需求以及已有的系统，对交互方式、布局、界面等各个部分进行设计。对于初学者，可以从分析已有系统开始。&lt;/p>
&lt;p>关于设计的一些原则以及所需的一些资源，可以参考&lt;a href="https://github.com/gztchan/awesome-design">Awesome Design&lt;/a>。&lt;/p>
&lt;h2 id="原型设计">原型设计&lt;/h2>
&lt;p>在实际开发之前，通常先进行原型设计。所谓原型设计，是设计出产品的大致界面、交互，使得用户可以提前体验产品，并方便设计、开发、产品团队的交流。&lt;/p>
&lt;p>&lt;a href="https://www.axure.com/">Axure RP&lt;/a>是非常常用的一个原型设计工具，它可以为网站、App等设计原型，并设计各种用户交互。除此之外，还可以用PS/AI/Sketch等设计真实感更强的原型。国内的&lt;a href="https://modao.cc/">墨刀&lt;/a>也是比较方便的一个在线原型设计工具。&lt;/p>
&lt;h2 id="手机界面开发">手机界面开发&lt;/h2>
&lt;p>不同的手机平台都有其设计规范，在进行界面开发时，我们不但要从功能上考虑，也要尽量符合相应的设计规范。对于iOS，苹果制定了&lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/">Human Interface Guidelines&lt;/a>；而Android官方推荐的是&lt;a href="https://material.io/design/">Material Design&lt;/a>。&lt;/p>
&lt;p>在实现复杂界面时，可采用一些第三方的界面库（&lt;a href="https://github.com/cjwirth/awesome-ios-ui">iOS&lt;/a>、&lt;a href="https://github.com/wasabeef/awesome-android-ui">Andorid&lt;/a>）以提高开发的效率。&lt;/p>
&lt;h2 id="作业">作业&lt;/h2>
&lt;p>完成手机端的界面设计和开发。&lt;/p></description></item><item><title>Android第三方库</title><link>https://mi.zjgsu.xyz/2020/10/20/android-thirdparty/</link><pubDate>Tue, 20 Oct 2020 09:50:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/10/20/android-thirdparty/</guid><description>&lt;p>在进行Android开发时（iOS也是类似），通常要用到第三方库。这些第三方库既包含&lt;a href="https://github.com/wasabeef/awesome-android-libraries">一般的库&lt;/a>，也包含&lt;a href="https://github.com/wasabeef/awesome-android-ui">第三方的UI库&lt;/a>。在选择库的时候，尽量选择那些用户较多、文档齐全的。可以参考一下这份&lt;a href="https://www.jianshu.com/p/4c28321def41">App常用第三方库整理
&lt;/a>。&lt;/p>
&lt;p>对于C/C++写的库，可以使用&lt;a href="https://developer.android.com/ndk/">NDK&lt;/a>将其集成到系统中。这在人工智能、图像处理、计算机视觉等领域非常普遍。&lt;/p></description></item><item><title>软件测试</title><link>https://mi.zjgsu.xyz/2020/10/13/test/</link><pubDate>Tue, 13 Oct 2020 18:30:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/10/13/test/</guid><description>&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95">软件测试&lt;/a>是现代软件开发中非常重要的一个环节，是保证软件质量的重要手段。软件测试所包含的内容很多，由于课时所限，我们只涉及和开发相关的部分内容。关于软件测试的更多内容可以参见&lt;a href="https://github.com/ligurio/awesome-software-quality">Awesome Software Quality&lt;/a>。&lt;/p>
&lt;h2 id="单元测试">单元测试&lt;/h2>
&lt;p>单元测试用来保证代码片段的正确性，通常是对函数进行测试。通常来说，我们在写程序之前应先写好代码的单元测试，以后每次修改程序都会运行单元测试以保证代码的正确性，这也是T&lt;a href="https://github.com/unicodeveloper/awesome-tdd">DD（测试驱动开发）&lt;/a>的思想。&lt;/p>
&lt;p>大部分的编程语言都提供了单元测试的工具，如Python的&lt;a href="https://github.com/nose-devs/nose">nose&lt;/a>、&lt;a href="https://docs.python.org/3/library/unittest.html">unittest&lt;/a>，Java的&lt;a href="http://junit.org/">JUnit&lt;/a>，JavaScript的&lt;a href="https://github.com/mochajs/mocha">mocha&lt;/a>、&lt;a href="https://github.com/facebook/jest">jest&lt;/a>等。&lt;/p>
&lt;h2 id="自动化测试">自动化测试&lt;/h2>
&lt;p>随着测试在软件开发中的比重越来越大，自动化测试就非常必要。它使用特点软件来执行测试流程，并比较实际结果与预期结果之间的差异。可以参考&lt;a href="https://github.com/atinfo/awesome-test-automation">Awesome Test Automation&lt;/a>中的工具来帮助实现测试自动化。&lt;/p>
&lt;p>软件测试是&lt;a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">持续集成&lt;/a>中一个非常重要的组成部分。&lt;/p>
&lt;h2 id="作业">作业&lt;/h2>
&lt;p>为你的代码加上单元测试，并实现自动化测试。&lt;/p></description></item><item><title>Web技术</title><link>https://mi.zjgsu.xyz/2020/10/13/web/</link><pubDate>Tue, 13 Oct 2020 09:50:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/10/13/web/</guid><description>&lt;p>对于前端而言，Web 是真正的跨平台技术，它能够运行在所有的主流平台，所以也是前端界面的重要选项。&lt;/p>
&lt;p>HTML、CSS 和 JavaScript是 Web 技术的三大组成部分。其中的 HTML 提供了网站的基本结构；CSS用于控制布局、外观以及格式；而JavaScript 用于控制各个元素的行为。三者的基本语法可以参考相应的书籍或者&lt;a href="https://www.w3schools.com/">w3schools&lt;/a>。&lt;/p>
&lt;h2 id="html">HTML&lt;/h2>
&lt;p>HTML定义了网站的基本结构，当前最新的标准是&lt;a href="https://www.w3schools.com/Html/html5_intro.asp">HTML5&lt;/a>。HTML5提供了更多具有语义的元素，在构建网页时应尽量使用这些具有语义的元素，而不要一味的使用 &lt;code>div&lt;/code> 。除了这些具有语义的元素之外，HTML5还提供了地理位置、拖拽与拖放、本地存储、应用缓存以及 Web worker 等。&lt;/p>
&lt;p>在画图方面，HTML5提供了&lt;a href="https://www.w3schools.com/Html/html5_canvas.asp">Canvas&lt;/a>，能够在 Web 页面上实现丰富的画图效果，通过&lt;a href="https://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/">WebGL&lt;/a>技术还可以实现强大的三维图形效果。&lt;/p>
&lt;p>HTML5的更多信息可以参考&lt;a href="https://github.com/diegocard/awesome-html5">Awesome HTML5&lt;/a>。&lt;/p>
&lt;h2 id="css">CSS&lt;/h2>
&lt;p>CSS的全称是层叠样式表(Cascading Style Sheets)，它用于描述 HTML 文档的样式，其最新标准是CSS3。CSS中的一个核心概念是&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model">盒模型&lt;/a>，理解该模型有助于理解 CSS 中和位置相关的各种参数。&lt;/p>
&lt;p>CSS 对于编程的支持很弱，为了更方便地写 CSS 人们开发了诸如&lt;a href="https://github.com/less/less.js">LESS&lt;/a>、&lt;a href="https://github.com/sass/sass">Sass&lt;/a>之类的预处理语言，它们对编程有很好的支持，并能够通过预处理生成等价的 CSS。当 CSS 规模较大时，采用这些技术能够提高CSS 的开发效率。&lt;/p>
&lt;p>考虑到桌面、移动设备等各种设备的屏幕大小不一，在设计 CSS 时应采用&lt;a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html">响应式设计技术&lt;/a>，使得网页在不同的设备上展现不同的外观。&lt;/p>
&lt;p>为网站设计 CSS 开发是一件量很大并且需要要一定的美学基础的工作，为了加快网站的开发，人们开发了很多 CSS 框架，如&lt;a href="http://getbootstrap.com/">Bootstrap&lt;/a>、&lt;a href="http://milligram.io/">Milligram&lt;/a>、&lt;a href="https://purecss.io/">Pure&lt;/a>等。利用这些框架可以快速搭建一个网站，然后可以在此基础上进行进一步的开发。更多的 CSS 框架可以参加&lt;a href="https://github.com/troxler/awesome-css-frameworks">Awesome CSS Framework&lt;/a>。&lt;/p>
&lt;p>更多 CSS 相关的知识可以参加&lt;a href="https://github.com/awesome-css-group/awesome-css">Awesome CSS&lt;/a>。&lt;/p>
&lt;h2 id="javascript">JavaScript&lt;/h2>
&lt;p>JavaScript用于定义页面元素的行为，它也是前端技术中发展最为迅速的一块。&lt;a href="http://es6.ruanyifeng.com/">ES6&lt;/a>是JavaScript非常重要的一个版本，它和以前的 JavaScript 有着巨大的改进，同时各个浏览器对它也有着不错的支持，建议开发时使用 ES6标准来进行开发。此外，&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>也是应用非常广的一门语言，它在 JavaScript 基础上增加了数据类型等各种改进，并且可以编译成JavaScript。&lt;/p>
&lt;p>如果页面的行为较为简单，可以使用传统的&lt;a href="https://jquery.org/">jQuery&lt;/a>技术，它相对比较简单，并且具有较好的兼容性。如果页面比较复杂，可以采用&lt;a href="https://reactjs.org/">React&lt;/a>、&lt;a href="https://cn.vuejs.org/index.html">Vue&lt;/a>、&lt;a href="https://angular.io/">Angular&lt;/a>等前端框架。&lt;/p>
&lt;p>当网站规模逐渐变大时，JavaScript 模块也会变得越来越复杂，可使用&lt;a href="https://www.npmjs.com/">npm&lt;/a>、&lt;a href="https://yarnpkg.com/">yarn&lt;/a>之类的工具进行模块化管理。同时，可使用&lt;a href="https://github.com/webpack/webpack">webpack&lt;/a>、&lt;a href="https://github.com/parcel-bundler/parcel">Parcel&lt;/a>之类的工具对 JavaScript、CSS 等各种资源进行打包。&lt;/p>
&lt;p>更多的 JavaScript 相关资源及各种包可以参见&lt;a href="https://github.com/sorrycc/awesome-javascript">Awesome JavaScript&lt;/a>。&lt;/p>
&lt;h2 id="作业">作业&lt;/h2>
&lt;ol>
&lt;li>完成前端的页面设计(HTML、CSS)&lt;/li>
&lt;li>完成前端与后端的交互以及前端动态效果（JavaScript)&lt;/li>
&lt;/ol></description></item><item><title>RESTful API</title><link>https://mi.zjgsu.xyz/2020/09/29/restful-api/</link><pubDate>Tue, 29 Sep 2020 18:30:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/09/29/restful-api/</guid><description>&lt;h2 id="restful架构">RESTful架构&lt;/h2>
&lt;p>REST(Representational State Transfer)最初是由&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">Roy Thomas Fielding提出的&lt;/a>，对RESTful架构的解释可以参考&lt;a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">阮一峰的这篇博客&lt;/a>。&lt;/p>
&lt;p>&lt;img src="./rest_cs.png" alt="rest_cs" title="RESTful Architecture">&lt;/p>
&lt;p>在设计RESTful API时，可以先看下「 &lt;a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南&lt;/a>」以及「&lt;a href="https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api">RESTful API 设计最佳实践&lt;/a>(&lt;a href="https://www.oschina.net/translate/best-practices-for-a-pragmatic-restful-api">中文&lt;/a>)」。同时可以参考现有系统的API设计（如&lt;a href="https://developer.github.com/v3/?">GitHub API&lt;/a>）。&lt;/p>
&lt;p>&lt;img src="./rest.png" alt="rest_img" title="RESTful API">&lt;/p>
&lt;p>现有的Web框架基本都对RESTful API有着较好的支持，直接进行开发。当前API用的比较多的数据格式是&lt;a href="http://www.json.org/">JSON&lt;/a>，但也有使用&lt;a href="https://www.w3.org/XML/">XML&lt;/a>的，两者的优劣可以参考「&lt;a href="https://restfulapi.net/json-vs-xml/">JSON vs XML&lt;/a>」&lt;/p>
&lt;p>对RESTful API的测试可以使用&lt;a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm">Postman&lt;/a>或者&lt;a href="https://github.com/jkbrzt/httpie">httpie&lt;/a>。&lt;/p>
&lt;p>更多的RESTful API资源可以参考&lt;a href="https://github.com/marmelab/awesome-rest">Awesome REST&lt;/a>。&lt;/p>
&lt;h2 id="rpc">RPC&lt;/h2>
&lt;p>另一种比较流行的客户端、服务端交互方式是RPC（Remote Procedure Call，远程过程调用），它通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。要使用RPC技术可以参考&lt;a href="https://grpc.io/">grpc&lt;/a>或者&lt;a href="https://thrift.apache.org/">thrift&lt;/a>。&lt;/p>
&lt;p>&lt;img src="./rpc.jpg" alt="rpc" title="RPC">&lt;/p>
&lt;h2 id="微服务">微服务&lt;/h2>
&lt;p>与本次课相关的另一项技术是&lt;a href="https://github.com/mfornos/awesome-microservices">微服务&lt;/a>，它将应用程序分解为一组松耦合的服务，服务间通过RESTful API及类似技术进行通信。&lt;/p>
&lt;h2 id="作业">作业&lt;/h2>
&lt;p>在&lt;code>docs/api.md&lt;/code>中完成系统的API设计，并完成相应的代码。&lt;/p></description></item><item><title>数据库</title><link>https://mi.zjgsu.xyz/2020/09/29/database/</link><pubDate>Tue, 29 Sep 2020 08:00:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/09/29/database/</guid><description>&lt;p>关于数据库的选择可以参见&lt;a href="https://mi.zjgsu.xyz/2020/09/22/software-architecture/" title="软件架构">上节课的内容&lt;/a>。这里主要讲关系数据库的设计及编程实现。&lt;/p>
&lt;h2 id="er模型">ER模型&lt;/h2>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/ER%E6%A8%A1%E5%9E%8B">ER模型&lt;/a>即实体关系模型，是数据库系统设计的常用工具。系统开发之前可以先用ER图设计出系统的数据库模型。常用的ER图工具有&lt;a href="https://products.office.com/zh-cn/visio/flowchart-software">Visio&lt;/a>、&lt;a href="http://dia-installer.de/">Dia&lt;/a>等。&lt;/p>
&lt;p>&lt;img src="./er.png" alt="er_fig" title="ER图">&lt;/p>
&lt;h2 id="数据库连接">数据库连接&lt;/h2>
&lt;p>应用程序通过数据库驱动与数据库连接，对于&lt;a href="https://github.com/vinta/awesome-python#database-drivers">Python&lt;/a>、 &lt;a href="https://github.com/sindresorhus/awesome-nodejs#database">Node.js&lt;/a>、 &lt;a href="https://github.com/markets/awesome-ruby#database-drivers">Ruby&lt;/a>、 &lt;a href="https://github.com/ziadoz/awesome-php#database">PHP&lt;/a>、 &lt;a href="http://www.oracle.com/technetwork/java/javase/jdbc/index.html">Java&lt;/a>等不同的编程语言一般会有相应的数据库驱动，请参考具体的文档了解其使用方法。&lt;/p>
&lt;h2 id="数据库迁移">数据库迁移&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Schema_migration">数据库迁移&lt;/a>是对关系数据库增量、可逆变化的管理。在数据库使用过程中，通常会根据需求不断变化，而数据库迁移就是用编程的方式维护这种变化，使得我们能够在不同版本的数据库之间进行转换。数据库迁移通常通过迁移工具进行实现，Ruby on Rails自带了比较完善的迁移工具；Python可以用&lt;a href="https://pypi.org/project/alembic/">alembic&lt;/a>来管理迁移；Node.js可以使用&lt;a href="https://knexjs.org/">knex&lt;/a>、&lt;a href="http://docs.sequelizejs.com/">Sequelize&lt;/a>等进行迁移。其它语言、框架的迁移工具请自行搜索。&lt;/p>
&lt;h2 id="orm">ORM&lt;/h2>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84">ORM&lt;/a>即对象关系映射，它把关系数据库和面向对象技术中对象关联起来，从而方便开发。大部分的语言都有ORM实现，如Ruby on Rails的&lt;a href="https://ruby-china.github.io/rails-guides/active_record_basics.html">Active Record&lt;/a>、Python的&lt;a href="https://www.sqlalchemy.org/">SQLAlchemy&lt;/a>、Java的&lt;a href="http://hibernate.org/">Hibernate&lt;/a>以及Node.js的&lt;a href="http://docs.sequelizejs.com/">Sequelize&lt;/a>等。&lt;/p>
&lt;p>对于MongoDB之类的文档数据库，是可以之间获取对象的，但是也可以用&lt;a href="https://docs.mongodb.com/ecosystem/drivers/#mongodb-odm-object-document-mapper">ODM&lt;/a>来实现代码中对象和文档对象的映射。&lt;/p>
&lt;p>&lt;img src="./orm.png" alt="orm_image" title="ORM">&lt;/p>
&lt;h2 id="数据库缓存">数据库缓存&lt;/h2>
&lt;p>如果系统的速度瓶颈在数据库操作上，可以采取数据库缓存来提高数据的访问速度。读数据时，先从内存缓存中读取，如果缓存中没有再读取数据库，并把数据库中读取的数据保存到缓存中。通常采用&lt;a href="https://redis.io/">Redis&lt;/a>、&lt;a href="https://memcached.org/">Memcached&lt;/a>等来对数据库进行缓存。&lt;/p>
&lt;h2 id="nosql">NoSQL&lt;/h2>
&lt;p>如果存储的是KV型的数据，可采用Redis；如果存储的数据是对象型的，可以采用MongoDB之类的文档数据库，它能够以比较直观的方式进行数据库操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// MongoDB
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insert&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">user_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">55&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ensureIndex&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">user_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">user_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">age&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">$gt&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">25&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">$set&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span> &lt;span class="nx">multi&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">remove&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;D&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">)&lt;/span>
&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">drop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="作业">作业&lt;/h2>
&lt;p>在&lt;code>docs/database.md&lt;/code>中完成系统的数据库设计，并完成相应的代码。&lt;/p></description></item><item><title>软件架构</title><link>https://mi.zjgsu.xyz/2020/09/22/software-architecture/</link><pubDate>Tue, 22 Sep 2020 18:30:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/09/22/software-architecture/</guid><description>&lt;h2 id="restful架构">RESTful架构&lt;/h2>
&lt;p>移动互联网和传统的网站开发相比，其客户端更加复杂多样，有可能是网页、手机以及各种其它设备，因此通常会采用服务端和前端分离的结构。现在最常见的是&lt;a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">RESTful架构&lt;/a>，其基本结构如下。&lt;/p>
&lt;p>&lt;img src="./software_arch.gif" alt="software_arch" title="REST-based architecture">&lt;/p>
&lt;p>本次课，我们将了解架构中各个部分，并确定最终的软件架构。&lt;/p>
&lt;h2 id="数据库">数据库&lt;/h2>
&lt;p>数据库用于存储应用程序的数据，它包括&lt;a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93">关系数据库&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Document-oriented_database">文档数据库&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Key-value_database">键值数据库&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Graph_database">图数据库&lt;/a>以及&lt;a href="https://en.wikipedia.org/wiki/Time_series_database">时间序列数据库&lt;/a>等。关系数据库以外的数据库也称为&lt;a href="https://zh.wikipedia.org/wiki/NoSQL">NoSQL&lt;/a>&lt;/p>
&lt;p>通常情况下，关系数据库就能满足大部分的需求。如果你的数据量很小并且使用频率较低，可以使用&lt;a href="https://www.sqlite.org/index.html">SQLite&lt;/a>，它是一种基于文件的关系数据库；一般情况下可以使用&lt;a href="http://mysql.com/">MySQL&lt;/a>、&lt;a href="https://mariadb.org/">MariaDB&lt;/a>、&lt;a href="http://www.postgresql.org/">PostgreSQL&lt;/a>。&lt;/p>
&lt;p>如果存储的数据类型是文档型或者无模式的，也可以采用&lt;a href="https://github.com/mongo/mongo">MongoDB&lt;/a>、&lt;a href="https://github.com/rethinkdb/rethinkdb">RethinkDB&lt;/a>。其它类型的数据库请参考相应的文档。&lt;/p>
&lt;p>为提高数据库的访问效率，通常会采用&lt;a href="https://redis.io/">Redis&lt;/a>、&lt;a href="https://memcached.org/">Memcached&lt;/a>等来对数据库进行缓存。&lt;/p>
&lt;h2 id="web框架">Web框架&lt;/h2>
&lt;p>Web框架主要接收客户端的请求，处理后将结果返回给客户端，用户对所有数据的访问也是通过Web框架来完成的。如果使用Python语言，可以选择&lt;a href="http://flask.pocoo.org/">Flask&lt;/a>、&lt;a href="https://www.djangoproject.com/">Django&lt;/a>、&lt;a href="http://www.tornadoweb.org/en/stable/">Tornado&lt;/a>等框架；如果选择&lt;a href="https://nodejs.org/en/">Node.js&lt;/a>，可以用&lt;a href="https://koajs.com/">Koa&lt;/a>、&lt;a href="https://expressjs.com/zh-cn/">Express&lt;/a>等框架；此外也可以选择其它语言的框架，如Ruby的&lt;a href="https://rubyonrails.org/">Ruby on Rails&lt;/a>，Go的&lt;a href="https://beego.me/">Beego&lt;/a>、&lt;a href="https://iris-go.com/">Iris&lt;/a>，Java的&lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html">Spring MVC&lt;/a>，&lt;a href="http://php.net/">PHP&lt;/a>等。&lt;/p>
&lt;h2 id="服务端客户端交互">服务端、客户端交互&lt;/h2>
&lt;p>服务端和客户端常用的交互方式有两种：&lt;a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">RESTful API&lt;/a>、&lt;a href="https://en.wikipedia.org/wiki/Remote_procedure_call">RPC&lt;/a>，其中以RESTful API占主流。大部分的Web框架都直接支持RESTful API。如果要使用RPC，可以采用&lt;a href="https://grpc.io/">grpc&lt;/a>或者&lt;a href="https://thrift.apache.org/">thrift&lt;/a>。&lt;/p>
&lt;h2 id="移动端开发">移动端开发&lt;/h2>
&lt;p>现在主流的移动端主要有&lt;a href="https://developer.android.com/?hl=zh-cn">Android&lt;/a>和&lt;a href="https://developer.apple.com/">iOS&lt;/a>，针对两者的开发可以参考相关的文档。&lt;/p>
&lt;p>另外一种是基于Web技术来进行开发，这类技术又分为两类：一是用&lt;a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html">自适应网页设计&lt;/a>来适配移动端设备，这本质上还是一种网页设计；另一种是用Web技术动态的生成原生界面，这类技术的代表有&lt;a href="https://facebook.github.io/react-native/">React Native&lt;/a>和&lt;a href="https://weex.apache.org/cn/guide/">Weex&lt;/a>。&lt;/p>
&lt;h2 id="web页面开发">Web页面开发&lt;/h2>
&lt;p>Web开发主要基于&lt;a href="https://www.w3schools.com/html/html5_intro.asp">HTML&lt;/a>、&lt;a href="http://www.w3school.com.cn/css3/index.ASP">CSS&lt;/a>和&lt;a href="https://wangdoc.com/javascript/">Javascript&lt;/a>。HTML定义了页面的主要结构；CSS用于实现页面的外观，可以使用&lt;a href="https://getbootstrap.com/">Bootstrap&lt;/a>等&lt;a href="https://github.com/troxler/awesome-css-frameworks">CSS框架&lt;/a>来帮助开发。&lt;/p>
&lt;p>近年来，Javascript发展迅速，特别是随着&lt;a href="http://es6.ruanyifeng.com/">ES6&lt;/a>的推出，它在Web领域的作用也越来越大，随之而来的是前端的复杂度越来越高。如果前端页面比较简单，可以采用&lt;a href="https://jquery.com/">jQuery&lt;/a>等传统的JS框架。如果前端比较复杂，可以采用&lt;a href="https://reactjs.org/">React&lt;/a>、&lt;a href="https://cn.vuejs.org/index.html">Vue&lt;/a>、&lt;a href="https://angular.io/">Angular&lt;/a>等前端框架。&lt;/p>
&lt;h2 id="baas">BaaS&lt;/h2>
&lt;p>随着移动互联网的发展，&lt;a href="https://en.wikipedia.org/wiki/Mobile_backend_as_a_service">BaaS&lt;/a>技术也应运而生，它把后端作为一种服务来提供给用户，从而使得开发者只要专注于前端即可。本课程建议大家自己开发后端以熟悉相应的技术，如果人力实在不够可以使用&lt;a href="https://leancloud.cn/">Leancloud&lt;/a>、&lt;a href="https://firebase.google.com/">Firebase&lt;/a>、&lt;a href="https://parseplatform.org/">Parse&lt;/a>之类的作为后端，以减少后端的开发量。&lt;/p>
&lt;h2 id="作业">作业&lt;/h2>
&lt;p>在&lt;code>docs/design.md&lt;/code>中完成系统的架构设计。&lt;/p></description></item><item><title>版本控制与文档</title><link>https://mi.zjgsu.xyz/2020/09/22/git-and-markdown/</link><pubDate>Tue, 22 Sep 2020 08:00:00 +0800</pubDate><author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author><guid>https://mi.zjgsu.xyz/2020/09/22/git-and-markdown/</guid><description>&lt;h2 id="git">git&lt;/h2>
&lt;p>在软件开发过程中，&lt;a href="https://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">版本控制&lt;/a>具有至关重要的作用。它可以实现代码、文档历史版本的保存，并能够还原任何一次历史变更，无论对个人开发还是团队协作都是必不可少的工具。&lt;/p>
&lt;p>&lt;a href="https://git-scm.com/">git&lt;/a>是版本控制软件中的佼佼者，同时也是现在使用最广泛的版本控制软件。学习git可以先从&lt;a href="https://git-scm.com/book/zh/v2">官方的教程&lt;/a>或者&lt;a href="https://try.github.io/">GitHub教程&lt;/a>开始，熟悉后可以参考&lt;a href="https://github.com/dictcp/awesome-git">Awesome git&lt;/a>(&lt;a href="https://github.com/hylerrix/awesome-git">中文&lt;/a>)中的资源更深入的学习。&lt;/p>
&lt;p>在多人协作时，通常会有一个规范的工作流程，熟悉git的基本操作后，可以进一步学习&lt;a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">git工作流程&lt;/a>，进一步规范版本控制。&lt;/p>
&lt;p>git虽然是一个分布式的版本控制系统，但有一个中心服务器会让团队合作起来更为方便，&lt;a href="https://github.com/">GitHub&lt;/a>是现在使用最为广泛的git托管服务，同时它也提供了丰富的代码评审、issue管理特性，使得团队更为方便。&lt;/p>
&lt;p>本课程的工程管理全部在GitHub上完成，要求&lt;a href="https://guides.github.com/">熟练使用GitHub的各项功能&lt;/a>。可以先看看&lt;a href="https://rogerdudler.github.io/git-guide/index.zh.html">Git简明指南&lt;/a>。&lt;/p>
&lt;h2 id="markdown">Markdown&lt;/h2>
&lt;p>软件开发中需要大量的文档，这些文档通常没有严格排版要求，但是要求简单并且容易进行版本控制。现在应用非常广的一种格式就是&lt;a href="https://zh.wikipedia.org/zh-hans/Markdown">Markdown&lt;/a>，本课程的所有文档要求采用Markdown进行书写，并用git进行管理。Markdown使用起来非常简单，可以参考&lt;a href="https://guides.github.com/features/mastering-markdown/">GitHub的Markdown教程&lt;/a>或者&lt;a href="https://coding.net/help/doc/project/markdown.html">Coding.net的Markdown教程（中文）&lt;/a>。&lt;/p>
&lt;h2 id="作业">作业&lt;/h2>
&lt;p>在工程中的&lt;code>README.md&lt;/code>文件中完成项目信息及分组信息。&lt;/p></description></item></channel></rss>