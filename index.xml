<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>移动互联专业实践</title>
    <link>https://mi.zjsu.xyz/</link>
    <description>Recent content on 移动互联专业实践</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>hanjianwei@zjgsu.edu.cn (Jianwei Han)</managingEditor>
    <webMaster>hanjianwei@zjgsu.edu.cn (Jianwei Han)</webMaster>
    <lastBuildDate>Tue, 29 Sep 2020 18:30:00 +0800</lastBuildDate>
    
        <atom:link href="https://mi.zjsu.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RESTful API</title>
      <link>https://mi.zjsu.xyz/2020/09/29/restful-api/</link>
      <pubDate>Tue, 29 Sep 2020 18:30:00 +0800</pubDate>
      <author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author>
      <guid>https://mi.zjsu.xyz/2020/09/29/restful-api/</guid>
      
        <description>&lt;h2 id=&#34;restful架构&#34;&gt;RESTful架构&lt;/h2&gt;
&lt;p&gt;REST(Representational State Transfer)最初是由&lt;a href=&#34;https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&#34;&gt;Roy Thomas Fielding提出的&lt;/a&gt;，对RESTful架构的解释可以参考&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/09/restful.html&#34;&gt;阮一峰的这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./rest_cs.png&#34; alt=&#34;rest_cs&#34; title=&#34;RESTful Architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;在设计RESTful API时，可以先看下「 &lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&#34;&gt;RESTful API 设计指南&lt;/a&gt;」以及「&lt;a href=&#34;https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34;&gt;RESTful API 设计最佳实践&lt;/a&gt;(&lt;a href=&#34;https://www.oschina.net/translate/best-practices-for-a-pragmatic-restful-api&#34;&gt;中文&lt;/a&gt;)」。同时可以参考现有系统的API设计（如&lt;a href=&#34;https://developer.github.com/v3/?&#34;&gt;GitHub API&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./rest.png&#34; alt=&#34;rest_img&#34; title=&#34;RESTful API&#34;&gt;&lt;/p&gt;
&lt;p&gt;现有的Web框架基本都对RESTful API有着较好的支持，直接进行开发。当前API用的比较多的数据格式是&lt;a href=&#34;http://www.json.org/&#34;&gt;JSON&lt;/a&gt;，但也有使用&lt;a href=&#34;https://www.w3.org/XML/&#34;&gt;XML&lt;/a&gt;的，两者的优劣可以参考「&lt;a href=&#34;https://restfulapi.net/json-vs-xml/&#34;&gt;JSON vs XML&lt;/a&gt;」&lt;/p&gt;
&lt;p&gt;对RESTful API的测试可以使用&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm&#34;&gt;Postman&lt;/a&gt;或者&lt;a href=&#34;https://github.com/jkbrzt/httpie&#34;&gt;httpie&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;更多的RESTful API资源可以参考&lt;a href=&#34;https://github.com/marmelab/awesome-rest&#34;&gt;Awesome REST&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;rpc&#34;&gt;RPC&lt;/h2&gt;
&lt;p&gt;另一种比较流行的客户端、服务端交互方式是RPC（Remote Procedure Call，远程过程调用），它通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。要使用RPC技术可以参考&lt;a href=&#34;https://grpc.io/&#34;&gt;grpc&lt;/a&gt;或者&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./rpc.jpg&#34; alt=&#34;rpc&#34; title=&#34;RPC&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;微服务&#34;&gt;微服务&lt;/h2&gt;
&lt;p&gt;与本次课相关的另一项技术是&lt;a href=&#34;https://github.com/mfornos/awesome-microservices&#34;&gt;微服务&lt;/a&gt;，它将应用程序分解为一组松耦合的服务，服务间通过RESTful API及类似技术进行通信。&lt;/p&gt;
&lt;h2 id=&#34;作业&#34;&gt;作业&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;docs/api.md&lt;/code&gt;中完成系统的API设计，并完成相应的代码。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>数据库</title>
      <link>https://mi.zjsu.xyz/2020/09/29/database/</link>
      <pubDate>Tue, 29 Sep 2020 08:00:00 +0800</pubDate>
      <author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author>
      <guid>https://mi.zjsu.xyz/2020/09/29/database/</guid>
      
        <description>&lt;p&gt;关于数据库的选择可以参见&lt;a href=&#34;https://mi.zjsu.xyz/2020/09/22/software-architecture/&#34; title=&#34;软件架构&#34;&gt;上节课的内容&lt;/a&gt;。这里主要讲关系数据库的设计及编程实现。&lt;/p&gt;
&lt;h2 id=&#34;er模型&#34;&gt;ER模型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/ER%E6%A8%A1%E5%9E%8B&#34;&gt;ER模型&lt;/a&gt;即实体关系模型，是数据库系统设计的常用工具。系统开发之前可以先用ER图设计出系统的数据库模型。常用的ER图工具有&lt;a href=&#34;https://products.office.com/zh-cn/visio/flowchart-software&#34;&gt;Visio&lt;/a&gt;、&lt;a href=&#34;http://dia-installer.de/&#34;&gt;Dia&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./er.png&#34; alt=&#34;er_fig&#34; title=&#34;ER图&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库连接&#34;&gt;数据库连接&lt;/h2&gt;
&lt;p&gt;应用程序通过数据库驱动与数据库连接，对于&lt;a href=&#34;https://github.com/vinta/awesome-python#database-drivers&#34;&gt;Python&lt;/a&gt;、 &lt;a href=&#34;https://github.com/sindresorhus/awesome-nodejs#database&#34;&gt;Node.js&lt;/a&gt;、 &lt;a href=&#34;https://github.com/markets/awesome-ruby#database-drivers&#34;&gt;Ruby&lt;/a&gt;、 &lt;a href=&#34;https://github.com/ziadoz/awesome-php#database&#34;&gt;PHP&lt;/a&gt;、 &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/jdbc/index.html&#34;&gt;Java&lt;/a&gt;等不同的编程语言一般会有相应的数据库驱动，请参考具体的文档了解其使用方法。&lt;/p&gt;
&lt;h2 id=&#34;数据库迁移&#34;&gt;数据库迁移&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Schema_migration&#34;&gt;数据库迁移&lt;/a&gt;是对关系数据库增量、可逆变化的管理。在数据库使用过程中，通常会根据需求不断变化，而数据库迁移就是用编程的方式维护这种变化，使得我们能够在不同版本的数据库之间进行转换。数据库迁移通常通过迁移工具进行实现，Ruby on Rails自带了比较完善的迁移工具；Python可以用&lt;a href=&#34;https://pypi.org/project/alembic/&#34;&gt;alembic&lt;/a&gt;来管理迁移；Node.js可以使用&lt;a href=&#34;https://knexjs.org/&#34;&gt;knex&lt;/a&gt;、&lt;a href=&#34;http://docs.sequelizejs.com/&#34;&gt;Sequelize&lt;/a&gt;等进行迁移。其它语言、框架的迁移工具请自行搜索。&lt;/p&gt;
&lt;h2 id=&#34;orm&#34;&gt;ORM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84&#34;&gt;ORM&lt;/a&gt;即对象关系映射，它把关系数据库和面向对象技术中对象关联起来，从而方便开发。大部分的语言都有ORM实现，如Ruby on Rails的&lt;a href=&#34;https://ruby-china.github.io/rails-guides/active_record_basics.html&#34;&gt;Active Record&lt;/a&gt;、Python的&lt;a href=&#34;https://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt;、Java的&lt;a href=&#34;http://hibernate.org/&#34;&gt;Hibernate&lt;/a&gt;以及Node.js的&lt;a href=&#34;http://docs.sequelizejs.com/&#34;&gt;Sequelize&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;对于MongoDB之类的文档数据库，是可以之间获取对象的，但是也可以用&lt;a href=&#34;https://docs.mongodb.com/ecosystem/drivers/#mongodb-odm-object-document-mapper&#34;&gt;ODM&lt;/a&gt;来实现代码中对象和文档对象的映射。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./orm.png&#34; alt=&#34;orm_image&#34; title=&#34;ORM&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库缓存&#34;&gt;数据库缓存&lt;/h2&gt;
&lt;p&gt;如果系统的速度瓶颈在数据库操作上，可以采取数据库缓存来提高数据的访问速度。读数据时，先从内存缓存中读取，如果缓存中没有再读取数据库，并把数据库中读取的数据保存到缓存中。通常采用&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;、&lt;a href=&#34;https://memcached.org/&#34;&gt;Memcached&lt;/a&gt;等来对数据库进行缓存。&lt;/p&gt;
&lt;h2 id=&#34;nosql&#34;&gt;NoSQL&lt;/h2&gt;
&lt;p&gt;如果存储的是KV型的数据，可采用Redis；如果存储的数据是对象型的，可以采用MongoDB之类的文档数据库，它能够以比较直观的方式进行数据库操作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// MongoDB
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;abc123&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ensureIndex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;$set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;作业&#34;&gt;作业&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;docs/database.md&lt;/code&gt;中完成系统的数据库设计，并完成相应的代码。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>软件架构</title>
      <link>https://mi.zjsu.xyz/2020/09/22/software-architecture/</link>
      <pubDate>Tue, 22 Sep 2020 18:30:00 +0800</pubDate>
      <author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author>
      <guid>https://mi.zjsu.xyz/2020/09/22/software-architecture/</guid>
      
        <description>&lt;h2 id=&#34;restful架构&#34;&gt;RESTful架构&lt;/h2&gt;
&lt;p&gt;移动互联网和传统的网站开发相比，其客户端更加复杂多样，有可能是网页、手机以及各种其它设备，因此通常会采用服务端和前端分离的结构。现在最常见的是&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/09/restful.html&#34;&gt;RESTful架构&lt;/a&gt;，其基本结构如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./software_arch.gif&#34; alt=&#34;software_arch&#34; title=&#34;REST-based architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;本次课，我们将了解架构中各个部分，并确定最终的软件架构。&lt;/p&gt;
&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;
&lt;p&gt;数据库用于存储应用程序的数据，它包括&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93&#34;&gt;关系数据库&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Document-oriented_database&#34;&gt;文档数据库&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Key-value_database&#34;&gt;键值数据库&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_database&#34;&gt;图数据库&lt;/a&gt;以及&lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series_database&#34;&gt;时间序列数据库&lt;/a&gt;等。关系数据库以外的数据库也称为&lt;a href=&#34;https://zh.wikipedia.org/wiki/NoSQL&#34;&gt;NoSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，关系数据库就能满足大部分的需求。如果你的数据量很小并且使用频率较低，可以使用&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt;，它是一种基于文件的关系数据库；一般情况下可以使用&lt;a href=&#34;http://mysql.com/&#34;&gt;MySQL&lt;/a&gt;、&lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt;、&lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果存储的数据类型是文档型或者无模式的，也可以采用&lt;a href=&#34;https://github.com/mongo/mongo&#34;&gt;MongoDB&lt;/a&gt;、&lt;a href=&#34;https://github.com/rethinkdb/rethinkdb&#34;&gt;RethinkDB&lt;/a&gt;。其它类型的数据库请参考相应的文档。&lt;/p&gt;
&lt;p&gt;为提高数据库的访问效率，通常会采用&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;、&lt;a href=&#34;https://memcached.org/&#34;&gt;Memcached&lt;/a&gt;等来对数据库进行缓存。&lt;/p&gt;
&lt;h2 id=&#34;web框架&#34;&gt;Web框架&lt;/h2&gt;
&lt;p&gt;Web框架主要接收客户端的请求，处理后将结果返回给客户端，用户对所有数据的访问也是通过Web框架来完成的。如果使用Python语言，可以选择&lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;、&lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django&lt;/a&gt;、&lt;a href=&#34;http://www.tornadoweb.org/en/stable/&#34;&gt;Tornado&lt;/a&gt;等框架；如果选择&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;，可以用&lt;a href=&#34;https://koajs.com/&#34;&gt;Koa&lt;/a&gt;、&lt;a href=&#34;https://expressjs.com/zh-cn/&#34;&gt;Express&lt;/a&gt;等框架；此外也可以选择其它语言的框架，如Ruby的&lt;a href=&#34;https://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt;，Go的&lt;a href=&#34;https://beego.me/&#34;&gt;Beego&lt;/a&gt;、&lt;a href=&#34;https://iris-go.com/&#34;&gt;Iris&lt;/a&gt;，Java的&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html&#34;&gt;Spring MVC&lt;/a&gt;，&lt;a href=&#34;http://php.net/&#34;&gt;PHP&lt;/a&gt;等。&lt;/p&gt;
&lt;h2 id=&#34;服务端客户端交互&#34;&gt;服务端、客户端交互&lt;/h2&gt;
&lt;p&gt;服务端和客户端常用的交互方式有两种：&lt;a href=&#34;http://www.ruanyifeng.com/blog/2011/09/restful.html&#34;&gt;RESTful API&lt;/a&gt;、&lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_procedure_call&#34;&gt;RPC&lt;/a&gt;，其中以RESTful API占主流。大部分的Web框架都直接支持RESTful API。如果要使用RPC，可以采用&lt;a href=&#34;https://grpc.io/&#34;&gt;grpc&lt;/a&gt;或者&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;移动端开发&#34;&gt;移动端开发&lt;/h2&gt;
&lt;p&gt;现在主流的移动端主要有&lt;a href=&#34;https://developer.android.com/?hl=zh-cn&#34;&gt;Android&lt;/a&gt;和&lt;a href=&#34;https://developer.apple.com/&#34;&gt;iOS&lt;/a&gt;，针对两者的开发可以参考相关的文档。&lt;/p&gt;
&lt;p&gt;另外一种是基于Web技术来进行开发，这类技术又分为两类：一是用&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html&#34;&gt;自适应网页设计&lt;/a&gt;来适配移动端设备，这本质上还是一种网页设计；另一种是用Web技术动态的生成原生界面，这类技术的代表有&lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt;和&lt;a href=&#34;https://weex.apache.org/cn/guide/&#34;&gt;Weex&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;web页面开发&#34;&gt;Web页面开发&lt;/h2&gt;
&lt;p&gt;Web开发主要基于&lt;a href=&#34;https://www.w3schools.com/html/html5_intro.asp&#34;&gt;HTML&lt;/a&gt;、&lt;a href=&#34;http://www.w3school.com.cn/css3/index.ASP&#34;&gt;CSS&lt;/a&gt;和&lt;a href=&#34;https://wangdoc.com/javascript/&#34;&gt;Javascript&lt;/a&gt;。HTML定义了页面的主要结构；CSS用于实现页面的外观，可以使用&lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;等&lt;a href=&#34;https://github.com/troxler/awesome-css-frameworks&#34;&gt;CSS框架&lt;/a&gt;来帮助开发。&lt;/p&gt;
&lt;p&gt;近年来，Javascript发展迅速，特别是随着&lt;a href=&#34;http://es6.ruanyifeng.com/&#34;&gt;ES6&lt;/a&gt;的推出，它在Web领域的作用也越来越大，随之而来的是前端的复杂度越来越高。如果前端页面比较简单，可以采用&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt;等传统的JS框架。如果前端比较复杂，可以采用&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;、&lt;a href=&#34;https://cn.vuejs.org/index.html&#34;&gt;Vue&lt;/a&gt;、&lt;a href=&#34;https://angular.io/&#34;&gt;Angular&lt;/a&gt;等前端框架。&lt;/p&gt;
&lt;h2 id=&#34;baas&#34;&gt;BaaS&lt;/h2&gt;
&lt;p&gt;随着移动互联网的发展，&lt;a href=&#34;https://en.wikipedia.org/wiki/Mobile_backend_as_a_service&#34;&gt;BaaS&lt;/a&gt;技术也应运而生，它把后端作为一种服务来提供给用户，从而使得开发者只要专注于前端即可。本课程建议大家自己开发后端以熟悉相应的技术，如果人力实在不够可以使用&lt;a href=&#34;https://leancloud.cn/&#34;&gt;Leancloud&lt;/a&gt;、&lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt;、&lt;a href=&#34;https://parseplatform.org/&#34;&gt;Parse&lt;/a&gt;之类的作为后端，以减少后端的开发量。&lt;/p&gt;
&lt;h2 id=&#34;作业&#34;&gt;作业&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;docs/design.md&lt;/code&gt;中完成系统的架构设计。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>版本控制与文档</title>
      <link>https://mi.zjsu.xyz/2020/09/22/git-and-markdown/</link>
      <pubDate>Tue, 22 Sep 2020 08:00:00 +0800</pubDate>
      <author>hanjianwei@zjgsu.edu.cn (Jianwei Han)</author>
      <guid>https://mi.zjsu.xyz/2020/09/22/git-and-markdown/</guid>
      
        <description>&lt;h2 id=&#34;git&#34;&gt;git&lt;/h2&gt;
&lt;p&gt;在软件开发过程中，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&#34;&gt;版本控制&lt;/a&gt;具有至关重要的作用。它可以实现代码、文档历史版本的保存，并能够还原任何一次历史变更，无论对个人开发还是团队协作都是必不可少的工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;是版本控制软件中的佼佼者，同时也是现在使用最广泛的版本控制软件。学习git可以先从&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;官方的教程&lt;/a&gt;或者&lt;a href=&#34;https://try.github.io/&#34;&gt;GitHub教程&lt;/a&gt;开始，熟悉后可以参考&lt;a href=&#34;https://github.com/dictcp/awesome-git&#34;&gt;Awesome git&lt;/a&gt;(&lt;a href=&#34;https://github.com/hylerrix/awesome-git&#34;&gt;中文&lt;/a&gt;)中的资源更深入的学习。&lt;/p&gt;
&lt;p&gt;在多人协作时，通常会有一个规范的工作流程，熟悉git的基本操作后，可以进一步学习&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/12/git-workflow.html&#34;&gt;git工作流程&lt;/a&gt;，进一步规范版本控制。&lt;/p&gt;
&lt;p&gt;git虽然是一个分布式的版本控制系统，但有一个中心服务器会让团队合作起来更为方便，&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;是现在使用最为广泛的git托管服务，同时它也提供了丰富的代码评审、issue管理特性，使得团队更为方便。&lt;/p&gt;
&lt;p&gt;本课程的工程管理全部在GitHub上完成，要求&lt;a href=&#34;https://guides.github.com/&#34;&gt;熟练使用GitHub的各项功能&lt;/a&gt;。可以先看看&lt;a href=&#34;https://rogerdudler.github.io/git-guide/index.zh.html&#34;&gt;Git简明指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;markdown&#34;&gt;Markdown&lt;/h2&gt;
&lt;p&gt;软件开发中需要大量的文档，这些文档通常没有严格排版要求，但是要求简单并且容易进行版本控制。现在应用非常广的一种格式就是&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/Markdown&#34;&gt;Markdown&lt;/a&gt;，本课程的所有文档要求采用Markdown进行书写，并用git进行管理。Markdown使用起来非常简单，可以参考&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;GitHub的Markdown教程&lt;/a&gt;或者&lt;a href=&#34;https://coding.net/help/doc/project/markdown.html&#34;&gt;Coding.net的Markdown教程（中文）&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;作业&#34;&gt;作业&lt;/h2&gt;
&lt;p&gt;在工程中的&lt;code&gt;README.md&lt;/code&gt;文件中完成项目信息及分组信息。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
